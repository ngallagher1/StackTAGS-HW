import java.io.*;
import java.util.*;
import java.lang.*;
import java.text.*;


/*
Algorithm:

Use <a> info </a> as a sample tag to explain, <a> being the open tag and </a> being the closed tag.
Use <a /> as a sample void tag

Create a stack (ListStack)
Create a file to write the final pairs of tags to (PairsOfTags.Txt)
Read the file line by line
Go through each line and search for '<'
Create variable, lastLocation, to keep track of where we should be searching for new '<'
If lastLocation = 0, start searching at the beginning of the line
If lastLocation does not equal 0, start searching from the endPosition of the last tag
If you find '<!', disregard the tag and print error message
Otherwise, continue to analyze the tag:

If the tag is an open tag (the second index and second to last index will not be '/')
	Push the tag onto the stack
If the tag is complete or void (character in the second to last index on the line is '/'),
	State that the tag is complete or void, and print it to the file PairsOfTags
If the tag is a closed tag (second character in the line is '/'),
	Assign the tag to a variable to hold it
	Change the tag so that it reads the same but WITHOUT the second character being "/"
	Check the stack for this changed tag
		If you find a match,
			Pop the tag out
			Print both the open and closed tags to PairsOfTags.txt
		If you don't find a match,
			Print an error message to PairsOfTags.txt

If there are still open tags in the stack, print error message with how many are left
If there are any extra closed tags, print an error message
Close reader and writer

*/

public class StacksAliceHW<E> extends ListStack<E>
{
	ListStack<E> tagData;

  	public static void main(String[] args)
  	{
		try
		{
			//Create file to print pairs of tags once they are popped from the stack
			//Create reader to read file Alice.h
			FileReader reader = new FileReader("Alice.h");
			PrintWriter writerPairs = new PrintWriter("PairsOfTags.txt");
			Scanner in = new Scanner(reader);

			ListStack<String> tagData = new ListStack<String>();

			//Read file line by line
			while(in.hasNextLine())
			{
				//For each line, count how many times '<' occurs, as each occurence signals the start of a new tag
				String tag = in.nextLine();
				tag = tag.trim();
				int counter = 0;
				//Each time you come across a '<', increase counter by one
				//This will keep count of how many tags are on one line
				for(int i = 0; i < tag.length(); i++)
				{
					if(tag.charAt(i) == '<')
						counter ++;
				}
                int lastLocation = 0;
                //While the line has more '<', make the inside of the tag into a substring
				while(counter != 0)
				{
					//LastLocation keeps track of where we should be searching for a new '<'
					//If LastLocation = 0, start searching at the beginning of the line
					if (lastLocation == 0)
					{
						int startPosition = tag.indexOf("<");
						int endPosition = tag.indexOf(">", startPosition);
						String subS = tag.substring(startPosition, endPosition) + ">";

						//If the tag is a comment tag (<!), print an error in place of the tag
						if ((subS.charAt(subS.indexOf("<") + 1)) == '!')
						{
							writerPairs.println("Error: the tag must have been a comment");
							lastLocation = endPosition;
							counter --;
						}
						//Otherwise, continue to analyze the tag
						else
						{
							//If the tag is an open tag (the second index and second to last index will NOT be '/')
							//Push the tag onto the stack
							if(subS.charAt(1) != '/' && subS.charAt(subS.length()-2) != '/')
							{
								tagData.push(subS);
							}
							//If the tag is complete or void (character in the second to last index on the line is '/')
							//State that the tag is complete or void, and print it to the file PairsOfTags
							if(subS.charAt(subS.length()-2) == '/')
							{
								writerPairs.println("Complete (void) tag: " + subS);
							}
							//If the tag is a closed tag (second character in the line is '/')
							if(subS.charAt(1) == '/')
							{
								//Assign the tag to a variable to hold it
								String hold = subS;

								//Change the tag so that it reads the same but WITHOUT the second character being "/"
								StringBuffer sb = new StringBuffer(subS);
								sb.deleteCharAt(1);

								//Check the stack for this changed tag, split it where it has a space
								//If the size of the array is greater than 1, add ">" onto the end of the array
								//It will then look the same as its corresponding open tag
								String peek = tagData.peek();
								String t[] = peek.split(" ");
								if(t.length > 1)
									peek = t[0] + ">";

								//If you find a match, pop the tag out, print both the open and closed tags to PairsOfTags.txt
								if(peek.equals(sb.toString()))
								{
									Object poppedTag = tagData.pop();
									poppedTag.toString();
									writerPairs.println("Open tag: " + poppedTag + "  Closed tag: " + hold);
								}
								//If you don't find a match, print an error message to PairsOfTags.txt
								else
								{
									writerPairs.println("No match found for " + hold);
								}
							}
							lastLocation = endPosition;
							counter --;
						}

					}
					//If lastLocation does not equal 0, start searching from the endPosition of the last tag
					else
					{
						int startPosition = tag.indexOf("<",lastLocation);
						int endPosition = tag.indexOf(">", startPosition);
						String subS = tag.substring(startPosition, endPosition) + ">";
						//If the tag is a comment tag (<!), print an error in place of the tag
						if ((subS.charAt(subS.indexOf("<") + 1)) == '!')
						{
							writerPairs.println("Error: the tag must have been a comment");
							lastLocation = endPosition;
							counter --;
						}
						//Otherwise, continue to analyze the tag
						else
						{
							//If the tag is an open tag (the second index and second to last index will not be '/')
							//Push the tag onto the stack
							if(subS.charAt(1) != '/' && subS.charAt(subS.length()-2) != '/')
							{
								tagData.push(subS);

							}
							//If the tag is complete or void (character in the second to last index on the line is '/')
							//State that the tag is complete or void, and print it to the file PairsOfTags
							if(subS.charAt(subS.length()-2) == '/')
							{
								writerPairs.println("Complete (void) tag: " + subS);
							}
							//If the tag is a closed tag (second character in the line is '/')
							if(subS.charAt(1) == '/')
							{
								//Assign the tag to a variable to hold it
								String hold = subS;

								//Change the tag so that it reads the same but WITHOUT the second character being "/"
								StringBuffer sb = new StringBuffer(subS);
								sb.deleteCharAt(1);

								//Check the stack for this changed tag, split it where it has a space
								//If the size of the array is greater than 1, add ">" onto the end of the array
								//It will then look the same as its corresponding open tag
								String peek = tagData.peek();
								String t[] = peek.split(" ");
								if(t.length > 1)
									peek = t[0] + ">";

								//If you find a match, pop the tag out, print both the open and closed tags to PairsOfTags.txt
								if(peek.equals(sb.toString()))
								{
									Object poppedTag = tagData.pop();
									poppedTag.toString();
									writerPairs.println("Open tag: " + poppedTag + "  Closed tag: " + hold);
								}
								//If you don't find a match, print an error message to PairsOfTags.txt
								else
								{
									writerPairs.println("No match found for " + hold);
								}
							}
							lastLocation = endPosition;
							counter --;
						}
					}

				}
			}
			//Close reader and writer
			reader.close();
			writerPairs.close();

			//If there are still open tags in the stack, print error message for each one
			while(!tagData.isEmpty())
			{
				Object extra = tagData.pop();
				String extraString = extra.toString();
				writerPairs.println("Error: The following open tag did not have a match: " + extraString);
			}

		}

		catch(IOException e)
		{
			System.out.println("Error opening file: " + e);
			System.exit(1);
		}


  	}
}
