import java.io.*;
import java.util.*;
import java.lang.*;
import java.text.*;


/*
Algorithm:

Use <a> info </a> as a sample tag to explain, <a> being the open tag and </a> being the closed tag.
Use <a /> as a sample void tag

Create a stack (that extends ListStack)
Create a file to write the tags to (Tags.txt)
Create a file to write the final pairs of tags to (PairsOfTags.Txt)
Read the file into one big string (create new String arraylist)
Go through each line and search for '<'
Create variable, lastLocation, to keep track of where we should be searching for new '<'
If lastLocation = 0, start searching at the beginning of the line
If lastLocation does not equal 0, start searching from the endPosition of the last tag
If you find '<!', disregard the tag and print error message
Otherwise, print the tag to Tags.txt
Close reader and writer

Search through the tags, one by one, in Tags.txt
Each tag will be on its own line, so read through the file line by line
If there is not a '<' in the first index, print error message and move to the next line
If the tag is an open tag (the second index and second to last index will not be '/')
	Push the tag onto the stack
If the tag is complete or void (character in the second to last index on the line is '/'),
	State that the tag is complete or void, and print it to the file PairsOfTags
If the tag is a closed tag (second character in the line is '/'),
	Assign the tag to a variable to hold it
	Change the tag so that it reads the same but WITHOUT the second character being "/"
	Check the stack for this changed tag
		If you find a match,
			Pop the tag out
			Print both the open and closed tags to PairsOfTags.txt
		If you don't find a match,
			Print an error message to PairsOfTags.txt

If there are still open tags in the stack, print error message with how many are left
If there are any extra closed tags, print an error message
Close remaining reader and writer
When entire file is anaylzed, print message "Complete"


*/

public class StacksAliceHW<E> extends ListStack<E>
{
	ListStack<E> tagData;

  	public static void main(String[] args)
  	{
		try
		{
			//Create files, one to print all tags to initially, and one to print pairs of tags once they are popped from the stack
			FileReader reader = new FileReader("Alice.h");
			PrintWriter writer = new PrintWriter("Tags.txt");
			Scanner in = new Scanner(reader);

			ArrayList<String> tags = new ArrayList<String>();
			ListStack tagData = new ListStack();
			//Read file line by line
			while(in.hasNextLine())
			{
				//For each line, count how many times '<' occurs
				String s = in.nextLine();
				int counter = 0;
				for(int i = 0; i < s.length(); i++)
				{
					if(s.charAt(i) == '<')
						counter ++;
				}
                int lastLocation = 0;
                //While the line has more '<', make the inside of the tag into a substring
				while(counter != 0)
				{
					//LastLocation keeps track of where we should be searching for new '<'
					//If LastLocation = 0, start searching at the beginning of the line
					if (lastLocation == 0)
					{
						int startPosition = s.indexOf("<");
						int endPosition = s.indexOf(">", startPosition);
						String subS = s.substring(startPosition, endPosition);
						//If the tag is a comment tag (<!), print an error in place of the tag
						if ((s.charAt(s.indexOf("<") + 1)) == '!')
						{
							writer.println(s.replace(subS,"Error: Comment Tag. Disregard Tag"));
							lastLocation = endPosition;
							counter --;
						}
						//Otherwise, print the tag to the file Tags.txt
						else
						{
							writer.println(subS + ">");
							lastLocation = endPosition;
							counter --;
						}

					}
					//If lastLocation does not equal 0, start searching from the endPosition of the last tag
					else
					{
						int startPosition = s.indexOf("<",lastLocation);
						int endPosition = s.indexOf(">", startPosition);
						String subS = s.substring(startPosition, endPosition);
						//If the tag is a comment tag (<!), print an error in place of the tag
						if ((s.charAt(s.indexOf("<") + 1)) == '!')
						{
							writer.println(s.replace(subS,"Error: Comment Tag. Disregard Tag"));
							lastLocation = endPosition;
							counter --;
						}
						//Otherwise, print the tag to the file Tags.txt
						else
						{
							writer.println(subS + ">");
							lastLocation = endPosition;
							counter --;
						}
					}

				}
			}
			//Close reader and writer that are done being used
			reader.close();
			writer.close();

			FileReader readerTags = new FileReader("Tags.txt");
			PrintWriter writerPairs = new PrintWriter("PairsOfTags.txt");
			Scanner inTags = new Scanner(readerTags);
			//Go through file of tags line by line
			while(inTags.hasNextLine())
			{
				String tag = inTags.nextLine();

					//If there is not a '<' in the first index, print error message and move to the next line
					if(tag.charAt(0) != '<')
					{
						writerPairs.println("Error: the tag must have been a comment");
					}
					//Otherwise, continue analyzing the line
					else
					{
							//If the tag is an open tag (the second index and second to last index will not be '/')
							//Push the tag onto the stack
							if(tag.charAt(1) != '/' && tag.charAt(tag.length()-2) != '/')
							{
								tagData.push(tag);

							}
							//If the tag is complete or void (character in the second to last index on the line is '/')
							if(tag.charAt(tag.length()-2) == '/')
							{
								//State that the tag is complete or void, and print it to the file PairsOfTags
								writerPairs.println("Complete (void) tag: " + tag);
							}
							//If the tag is a closed tag (second character in the line is '/')
							if(tag.charAt(1) == '/')
							{
								//Assign the tag to a variable to hold it
								String hold = tag;

								//Change the tag so that it reads the same but WITHOUT the second character being "/"
								StringBuffer sb = new StringBuffer(tag);
								sb.deleteCharAt(1);
								sb.toString();

								//Check the stack for this changed tag
								//If you find a match, pop the tag out, print both the open and closed tags to PairsOfTags.txt
								Object peek = tagData.peek();
								peek.toString();
// PROBLEM: ******************************************
								if(peek == sb)
								{
									Object poppedTag = tagData.pop();
									poppedTag.toString();
									writerPairs.println("Open tag: " + poppedTag + "  Closed tag: " + hold);
								}
								//If you don't find a match, print an error message to PairsOfTags.txt
								else
								{
									writerPairs.println("No match found for " + hold);
								}
							}
						}


			}
			//If there are still open tags in the stack, print error message for each one
			while(!tagData.isEmpty())
			{
				Object extra = tagData.pop();
				String extraString = extra.toString();
				writerPairs.println("Error: The following open tag did not have a match: " + extraString);
			}

			//Close remaining reader and writer
			readerTags.close();
			writerPairs.close();

		}

		catch(IOException e)
		{
			System.out.println("Error opening file: " + e);
			System.exit(1);
		}


  	}
}
